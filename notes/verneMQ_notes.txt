# we need to change the vm1.args in VerneMq to give unique names to the nodes and enable cluster creation

###################### Necessary for the alpine distribution -> all changes are not taken by passing as docker enviromental parameters
#add the accept lincense to the config file
# d1.cmd('echo "accept_eula = yes" >> /vernemq/etc/vernemq.conf')
#Change the nodename in the config file to create the cluster
# d1.cmd('sed -i "/nodename = VerneMQ@127.0.0.1/s/= .*/= dev1@172.17.0.2/" /vernemq/etc/vernemq.conf')
# #Change the node in the args file
# d1.cmd('sed -i "/VerneMQ@127.0.0.1/s/ .*/ dev1@172.17.0.2/" /vernemq/etc/vm.args')

# # configure the listener port
# d1.cmd('echo "listener.tcp.default = 10.0.0.251:1883" >> /vernemq/etc/vernemq.conf')

# start vernemq after configuration
# d1_bis = client.containers.get('mn.d1').exec_run("start_vernemq", stdout=True, stderr=True)
# info(d1_bis, '\n')

#add the accept lincense to the config file otherwise it doesn't start the node
# d2.cmd('echo "accept_eula = yes" >> /vernemq/etc/vernemq.conf')
# #Change the nodename in the config file to create the cluster
# d2.cmd('sed -i "/nodename = VerneMQ@127.0.0.1/s/= .*/= dev1@172.17.0.3/" /vernemq/etc/vernemq.conf')
# #Change the node in the args file
# d2.cmd('sed -i "/VerneMQ@127.0.0.1/s/ .*/ dev2@172.17.0.3/" /vernemq/etc/vm.args')
#
# #set tcp listener port
# d2.cmd('echo "listener.tcp.default = 10.0.0.252:1884" >> /vernemq/etc/vernemq.conf')
# start vernemq
# should insert it in a thread since it keeps operating
# d2_bis = client.containers.get('mn.d2').exec_run("start_vernemq", stdout=True, stderr=True)
# info(d2_bis, '\n')

########################## Original Docker file ##########################
# the majority of the above steps are done by simply passing as docker environment parameters, which is not the case in Alpine
# The only difference is that we need to insert the start_vernemq into a thread since it continues working

